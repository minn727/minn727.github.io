[
  
  {
    "title": "PCIe Express Technology 개요",
    "url": "/posts/PCIe-Express-Technology-%EA%B0%9C%EC%9A%94/",
    "categories": "PCIe & CXL, PCIe",
    "tags": "",
    "date": "2024-09-20 00:00:00 +0900",
    





    
    "snippet": "",
    "content": ""
  },
  
  {
    "title": "pyenv로 Python 설치하기",
    "url": "/posts/pyenv%EB%A1%9C-Python-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
    "categories": "개발 환경 설정, Ubuntu",
    "tags": "",
    "date": "2024-09-14 00:00:00 +0900",
    





    
    "snippet": "1. 개요pyenv는 다양한 버전의 Python을 쉽게 관리하고 설치할 수 있는 도구입니다. 이를 사용하면 여러 Python 버전을 시스템에 설치하고, 필요에 따라 특정 버전을 활성화할 수 있습니다. 아래는 pyenv를 사용하여 Python을 설치하는 방법을 단계별로 설명합니다.2. 설치 방법2.1. 필요한 종속성 설치  아래의 명령어를 통해 의존성 ...",
    "content": "1. 개요pyenv는 다양한 버전의 Python을 쉽게 관리하고 설치할 수 있는 도구입니다. 이를 사용하면 여러 Python 버전을 시스템에 설치하고, 필요에 따라 특정 버전을 활성화할 수 있습니다. 아래는 pyenv를 사용하여 Python을 설치하는 방법을 단계별로 설명합니다.2. 설치 방법2.1. 필요한 종속성 설치  아래의 명령어를 통해 의존성 패키지를 설치합니다.sudo apt updatesudo apt install -y make build-essential libssl-dev zlib1g-dev \\libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev \\liblzma-dev python3-openssl git2.2. pyenv: Python 버전 관리 도구 설치하기  간단하게 curl을 이용하여 설치합니다.          curl이 없으시면 sudo apt install curl로 설치합시다.      curl https://pyenv.run | bash2.3. 환경 설정pyenv가 설치된 후, pyenv 명령어를 사용할 수 있도록 환경 변수를 설정해야 합니다. 이를 위해 쉘 설정 파일(예: .bashrc, .bash_profile, .zshrc)을 수정합니다.  본인의 쉘 설정 파일을 열고 맨 밑에 내용을 추가합니다. (저의 경우에는 .zshrc)# 쉘 설정 파일 열기vi ~/.zshrc# .zshrc...# 아래 내용 추가export PYENV_ROOT=\"$HOME/.pyenv\"export PATH=\"$PYENV_ROOT/bin:$PATH\"eval \"$(pyenv init --path)\"eval \"$(pyenv init -)\"  쉘 설정을 적용합니다.source ~/.zshrc2.4. pyenv로 Python 설치  설치할 수 있는 Python 버전 목록을 확인하고, 원하는 버전을 설치합니다.pyenv install --listpyenv install 3.9.72.5. Python 버전 활성화  설치한 Python 버전을 전역적으로 활성화하려면 다음 명령어를 사용합니다.pyenv global 3.9.7  설치한 Python 버전을 특정 디렉토리에서 활성화하려면 다음 명령어를 사용합니다.          원하는 디렉토리로 이동한 뒤에 명령어를 실행해야 합니다.      pyenv local 3.9.7"
  },
  
  {
    "title": "Jekyll Chirpy 이용하여 블로그 만들기",
    "url": "/posts/Jekyll-Chirpy-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0/",
    "categories": "GitHub Blog",
    "tags": "",
    "date": "2024-09-14 00:00:00 +0900",
    





    
    "snippet": "기존에 Markdown 기반 노트 툴인 Obsidian을 사용하고 있었던지라, 블로그 운영에 크게 힘을 들이지 않을 수 있는 GitHub Blog를 플랫폼으로 선택했습니다.그런데 이게 웬걸… 유명한 Jekyll theme인 Chirpy를 선택해서 블로그를 만드려고 했는데, 쉬울 것으로 예상했지만 예상과 다르게도 수많은 역경과 난관을 거치고 난 뒤에야 ...",
    "content": "기존에 Markdown 기반 노트 툴인 Obsidian을 사용하고 있었던지라, 블로그 운영에 크게 힘을 들이지 않을 수 있는 GitHub Blog를 플랫폼으로 선택했습니다.그런데 이게 웬걸… 유명한 Jekyll theme인 Chirpy를 선택해서 블로그를 만드려고 했는데, 쉬울 것으로 예상했지만 예상과 다르게도 수많은 역경과 난관을 거치고 난 뒤에야 블로그 개설을 완료하게 되었습니다. 설치 방법이 나와 있는 블로그마다도 방법이 모두 다르고 필수적으로 수행해야 되는 내용들 또한 파편화 되어있어서 통합 Guideline을 만들고자 하는 마음에 해당 포스트를 작성하게 되었습니다.제 개발 환경에서의 패키지 버전과 Chirpy 버전은 아래와 같습니다.  2024.09 기준  Chirpy: v7.1.0, Commit Hash = cbc9319  Ruby &amp; gem          Ruby를 깔면 gem도 자동으로 설치가 되므로 Ruby 버전만 신경쓰면 됩니다.      Ruby: v3.3.5      gem: v3.5.16        node &amp; npm          node를 깔면 npm도 자동으로 설치가 되므로 node 버전만 신경쓰면 됩니다.      node: v20.17.0      npm: v10.8.2      설치 방법필요 패키지 설치ruby, node 설치  아래 제가 작성한 다른 포스트를 보고 알맞은 버전을 설치해주시기 바랍니다.          rvenv &amp; Ruby 설치      nvm &amp; Node 설치      jekyll, bundler 설치  아래 명령어를 입력하여 jekyll과 bundler를 설치합니다.gem install jekyll bundlerLocal 환경에 테마 Clone하기Chirpy-starter라는 매우 간편한 테마 설치 방법이 있지만, 이것보다는 커스터마이징 자유도가 훨씬 높은 Chirpy Fork를 통해 테마를 설치하도록 하겠습니다.  Chirpy GitHub에서 아래와 같이 본인 레포지토리로 fork 해옵니다.  Repository name은 꼭 [본인 username].github.io로 설정해주세요.  Repository setting에서 branch 이름을 master에서 main으로 변경합니다.  아래 명령어를 통해 본인의 local 환경으로 clone 합니다.          [username]에 본인의 github username을 넣으시면 됩니다.      e.g., 저의 경우에는 git clone https://github.com/minn727/minn727.github.io.git      git clone https://github.com/[username]/[username].github.io.git테마 초기화테마를 본격적으로 사용하기 전에 tools/init.sh를 통해 initialize 해주는 과정을 거쳐야 하는데, 현재 버전 기준으로 바로 해당 script 파일을 실행하면 commit 순서가 꼬여서 조금 귀찮게 됩니다.물론 고칠 수 있는 방법은 당연히 있지만, 귀찮음을 방지하기 위해 아래 내용도 꼭 순서대로 따라와 주시기 바랍니다.  tools/init.sh 파일을 열고 reset_latest()에 있는 해당 행을 주석 처리합니다.  바뀐 내용을 commit하지 않으면 tools/init.sh 파일 실행이 불가능하므로 아래와 같이 명령어를 입력하여 스크립트 파일을 실행합니다.git add -Agit commit -m \"init.sh changed\"tools/init.sh  다음과 같이 Initialization successful! 이 뜬다면 잘 완료된 것입니다.필요 Bundle 설치  아래 명령어를 통해 필요 bundle을 설치합니다.bundle  다음과 같이 Bundle complete! 이 뜬다면 잘 완료된 것입니다.          bundle fund 관련 내용은 error가 아니라 해당 패키지가 말 그대로 자금을 필요로 한다는 내용이어서 넘기면 됩니다.      Local Test  위의 설치가 완료되었다면 아래 명령어를 통해 로컬에서 작동하는지 확인합니다.  아래 명령어를 입력 후, 웹브라우저에서 127.0.0.1:4000을 입력하였을 때 블로그가 정상적으로 표시되는 지를 확인하면 됩니다.          tools/init.sh를 통한 초기화로 인해 sample post가 삭제되었기 때문에 빈 블로그가 뜨게 됩니다.      bundle exec jekyll serve  여기까지 완료되었으면 지금까지의 내용을 commit 하고, remote origin에 push해줍니다.git add -Agit commit -m \"first commit\"git push originGitHub Pages 관련 수정이제 GitHub repository에서 Build and deployment 관련 설정을 수정해주어야 합니다. 현재 구글링을 통해 설치 방법 여러개를 보고 테마를 설치하게 되면 해당 순서를 먼저 수행하기도 하는데, 그 경우 remote와 local의 commit이 달라서 git push가 안 되는 등의 에러가 발생할 수 있습니다.따라서 위의 내용까지 모두 마친 이후에, GitHub Pages 관련 수정을 하는 것을 권장드립니다.  Repository setting의 Pages 탭에 들어가서 GitHub Actions로 변경해줍니다.  Commit changes… &gt; Sign off and commit changes를 눌러주게 되면 .github/workflows 폴더 안에 jekyll.yml 파일이 생성됩니다.  위의 파일이 생성되면서 자동으로 GitHub에서 하나의 commit을 생성하게 되므로, 아까 clone해온 local에서 git pull을 통해 추가된 jekyll.yml을 local로 가져옵니다.git pullGitHub Actions에서 배포 확인하기  GitHub Actions 탭에서 배포가 잘 되고 있는지를 확인할 수 있습니다.          만약 위의 과정을 모두 순서대로 따라했다면 가장 마지막 commit은 Create jekyll.yml이 되어 있을 것입니다.        약 1분 정도를 기다린 이후 배포가 잘 되었다면 아래 그림과 같이 표시됩니다.마무리설치 이후에 플러그인 설치나 post 작성에 대해서는 다른 포스트 작성 이후 해당 게시글에 링크 걸겠습니다.포스트 봐주셔서 감사합니다."
  },
  
  {
    "title": "rbenv로 Ruby 설치하기",
    "url": "/posts/rbenv%EB%A1%9C-Ruby-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
    "categories": "개발 환경 설정, Ubuntu",
    "tags": "",
    "date": "2024-09-13 00:00:00 +0900",
    





    
    "snippet": "1. 개요웬만한 패키지같은 경우에는 sudo apt 하나면 만능으로 해결되지만, Ruby의 경우 aptitude로 설치하면 최신 버전이 아닌 3.0 버전까지밖에 설치가 안되더라구요. (저의 경우에 이런 것이라 사용자마다 다를 수 있습니다.) Ruby가 version dependency가 굉장히 심한 언어이다보니 별도의 version manager를 통...",
    "content": "1. 개요웬만한 패키지같은 경우에는 sudo apt 하나면 만능으로 해결되지만, Ruby의 경우 aptitude로 설치하면 최신 버전이 아닌 3.0 버전까지밖에 설치가 안되더라구요. (저의 경우에 이런 것이라 사용자마다 다를 수 있습니다.) Ruby가 version dependency가 굉장히 심한 언어이다보니 별도의 version manager를 통해서 설치하는 것이 훨씬 편합니다. 기존에 pyenv 등을 사용하시던 분이면 익숙하실거라 생각합니다.Ruby의 version manager에는 크게  rvm  rbenv이렇게 2가지가 있는데 rbenv가 가볍다보니 많은 사람들이 해당 유틸리티를 사용하고 있습니다. 본 포스트에서는 rbenv로 알맞은 버전의 Ruby를 설치하는 방법을 알려드리고자 합니다.2. 설치 방법2.1. 현재 설치된 Ruby 제거하기 (Optional)  먼저 기존에 설치된 Ruby 버전을 제거해야 할 수 있습니다.sudo apt remove ruby2.2. rbenv: Ruby 버전 관리 도구 설치하기  (중요) zsh 쓸 때 기준이므로 기본 shell 쓰시는 분들은 환경 변수를 ~/.bashrc 에 설정해야 합니다.# 필요한 의존성 패키지 설치sudo apt updatesudo apt install -y git curl autoconf bison build-essential libssl-dev libyaml-dev \\libreadline-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev libgdbm6 libdb-dev# rbenv 설치git clone https://github.com/rbenv/rbenv.git ~/.rbenvecho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.zshrcecho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.zshrcexec $SHELL# ruby-build 플러그인 설치git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build2.3. 원하는 버전의 Ruby 설치 &amp; 확인하기  rbenv install --list를 통해 설치 가능한 stable release 버전을 확인합니다.  원하는 버전의 Ruby를 설치하고, 해당 버전을 활성화한 뒤, 설치가 잘 되었는지 확인합니다.rbenv install 3.3.5rbenv global 3.3.5rbenv local 3.3.5ruby -v"
  },
  
  {
    "title": "nvm으로 node 설치하기",
    "url": "/posts/nvm%EC%9C%BC%EB%A1%9C-node-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/",
    "categories": "개발 환경 설정, Ubuntu",
    "tags": "",
    "date": "2024-09-13 00:00:00 +0900",
    





    
    "snippet": "1. 개요nvm이란 Node Version Manager의 약자로, Node.js의 버전을 관리하는 도구입니다. 보통 이러한 버전 관리자는 여러 프로젝트에서 다른 버전을 요구할 때 사용함으로써 패키지의 버전을 쉽게 설정하고 전환할 수 있습니다.2. 설치 방법2.1. Node.js 버전 관리 도구(nvm) 설치# nvm 설치 스크립트 실행curl -o-...",
    "content": "1. 개요nvm이란 Node Version Manager의 약자로, Node.js의 버전을 관리하는 도구입니다. 보통 이러한 버전 관리자는 여러 프로젝트에서 다른 버전을 요구할 때 사용함으로써 패키지의 버전을 쉽게 설정하고 전환할 수 있습니다.2. 설치 방법2.1. Node.js 버전 관리 도구(nvm) 설치# nvm 설치 스크립트 실행curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash2.2. nvm 설치 완료 후 설정 파일 적용  (중요) zsh 쓸 때 기준이므로 기본 shell 쓰시는 분들은 환경 변수를 ~/.bashrc 에 설정해야 합니다.echo 'export NVM_DIR=\"$HOME/.nvm\"' &gt;&gt; ~/.zshrcecho '[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"' &gt;&gt; ~/.zshrc  그다음, 환경 변수를 적용합니다.source ~/.zshrc2.3. 최신 Node.js 버전 설치  nvm이 제대로 설치되었는지 확인한 후 최신 Node.js 버전을 설치합니다.  저의 경우 포스트 작성 시점 기준 Latest LTS인 20.17.0 버전을 설치했습니다.# nvm 명령어가 동작하는지 확인nvm --version# 최신 버전 확인nvm ls-remote# Node.js 원하는 버전 설치nvm install 20.17.0# 기본 Node.js 버전으로 설정nvm use node2.4. Node.js와 npm 버전 확인  설치한 특정 버전을 기본으로 설정합니다.nvm alias default 20.17.0  최신 Node.js 버전이 잘 설치되었는지 확인합니다.node -v   # Node.js 버전 확인npm -v    # npm 버전 확인"
  },
  
  {
    "title": "VirtualBox 네트워크 설정 (호스트 전용 어댑터, 어댑터에 브리지 조합)",
    "url": "/posts/VirtualBox-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%84%A4%EC%A0%95/",
    "categories": "개발 환경 설정, VirtualBox",
    "tags": "",
    "date": "2024-09-13 00:00:00 +0900",
    





    
    "snippet": "VirtualBox Ubuntu와 Windows가 서로 통신할 수 있으려면 VirtualBox의 네트워크 설정을 올바르게 구성해야 합니다.VirtualBox의 네트워크 모드는  NAT  NAT 네트워크  호스트 전용 어댑터  어댑터에 브리지  내부 네트워크등이 존재하지만, 일반적인 개발 환경에서는 NAT, 호스트 전용 어댑터, 어댑터에 브리지 정도만 ...",
    "content": "VirtualBox Ubuntu와 Windows가 서로 통신할 수 있으려면 VirtualBox의 네트워크 설정을 올바르게 구성해야 합니다.VirtualBox의 네트워크 모드는  NAT  NAT 네트워크  호스트 전용 어댑터  어댑터에 브리지  내부 네트워크등이 존재하지만, 일반적인 개발 환경에서는 NAT, 호스트 전용 어댑터, 어댑터에 브리지 정도만 사용되며, 네트워크 세팅에는 아래에서 소개할 2가지 방법이 주로 사용됩니다.먼저 각 모드에 대한 설명 이후 네트워크 설정 방법에 대해 기술하도록 하겠습니다.시간 없으신 분들은 2. 네트워크 설정 방법만 보시면 됩니다.1. 네트워크 모드아래에는 주로 쓰이는 3가지 모드에 대한 간략한 설명이 나와 있습니다. 좀더 상세한 설명을 원하시는 분들은 아래에 다른 블로그의 링크를 첨부하였으니 참고 부탁드립니다.  https://co-no.tistory.com/entry/VirtualBox-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%A2%85%EB%A5%98-%EB%B0%8F-%EA%B5%AC%EC%84%B1  https://takudaddy.tistory.com/3521.1. NAT기본적으로 NAT는 외부 네트워크와 통신이 가능하고, 가상 머신에서 호스트 시스템으로의 통신은 가능하지만, 호스트 시스템 또는 외부 네트워크에서 가상 머신으로는 포트포워딩 설정이 되어 있는 경우에만 통신이 가능합니다.1.2. 호스트 전용 어댑터가상 머신과 호스트 시스템 간의 통신만 가능하며, 외부 네트워크에는 연결되지 않습니다. 따라서 개발 환경 세팅 (Windows와 Ubuntu 간의 ssh 연결)에 가장 적합한 모드입니다.1.3. 어댑터에 브리지모든 가상 머신이 호스트와 동일한 물리 네트워크에 직접 연결된 것처럼 보이게 해주는 네트워크 설정입니다. 따라서 포트포워딩 등의 설정이 따로 필요 없이 가상 머신의 IP address를 이용하여 외부에서 접근이 가능합니다. (물론 host에서도 접근이 가능하지만, 호스트 전용 어댑터 방식을 사용하면 되는데 굳이 이 방식으로 접근하지는 않습니다.)2. 네트워크 설정 방법아래에서는 여러 네트워크 설정 방법 중 대표적인 설정 방법을 말씀드리겠습니다.참고로, SoC, 임베디드 관련 개발을 할 경우 Windows host에 보드를 연결한 뒤 VirtualBox 내에 있는 NFS (Network File System)를 부팅에 이용하곤 하는데, 이 경우 호스트 전용 어댑터 + 어댑터에 브리지 설정 방식이 권장됩니다.호스트 전용 어댑터를 사용하여 Windows host와 Ubuntu를 연결하고, Ubuntu와 외부 네트워크를 연결할 일이 있을 때에는 어댑터에 브리지를 사용하는 방식입니다.      가상 머신의 전원을 끈 상태여야 네트워크 설정을 추가 및 변경할 수 있습니다.        가상 머신의 설정 &gt; 네트워크에서 네트워크 어댑터 1을 다음과 같이 설정합니다.        네트워크 어댑터 2를 다음과 같이 설정합니다.        ifconfig를 통해 네트워크 구성이 잘 되었는지 확인합니다.          명령어가 불가능하다면 sudo apt install net-tools를 실행한 뒤에 다시 쳐줍니다.      enp0s3: 호스트 전용 어댑터로 연결 시 사용할 ip address가 나타납니다.                  여기에서는 192.168.56.101이고, 192.168.56.xxx 형태입니다.                    enp0s8: 어댑터에 브리지로 연결 시 사용할 ip address가 나타납니다.                  여기에서는 192.168.0.143입니다.          외부 접근 시 해당 ip address를 사용하면 됩니다.                    3. 다른 네트워크 설정 방법다른 블로거 분들께서 작성한 포스트 링크를 아래에 첨부하겠습니다.  NAT 포트포워딩 설정 방법"
  },
  
  {
    "title": "VirtualBox Samba 설정",
    "url": "/posts/VirtualBox-Samba-%EC%84%A4%EC%A0%95/",
    "categories": "개발 환경 설정, VirtualBox",
    "tags": "",
    "date": "2024-09-13 00:00:00 +0900",
    





    
    "snippet": "",
    "content": ""
  },
  
  {
    "title": "Ubuntu 설치 후 필수 세팅 총정리",
    "url": "/posts/Ubuntu-%EC%84%A4%EC%B9%98-%ED%9B%84-%ED%95%84%EC%88%98-%EC%84%B8%ED%8C%85-%EC%B4%9D%EC%A0%95%EB%A6%AC/",
    "categories": "개발 환경 설정, Ubuntu",
    "tags": "",
    "date": "2024-09-13 00:00:00 +0900",
    





    
    "snippet": "Ubuntu를 처음 설치하고 나면 필요한 패키지 설치하고, 개발 환경 설정하느라 한나절이 가곤 합니다. 원래 구글링으로 여러 블로그 돌아다니면서 세팅을 했었는데, 최근 들어 Ubuntu 설치해야 할 일이 많아지다 보니 매번 블로그 들락날락 거리는게 귀찮아서 이렇게 문서로 정리해봤습니다.초기 세팅에 필요한 사항들은 거의 다 기재가 되어 있을 것이라 생각...",
    "content": "Ubuntu를 처음 설치하고 나면 필요한 패키지 설치하고, 개발 환경 설정하느라 한나절이 가곤 합니다. 원래 구글링으로 여러 블로그 돌아다니면서 세팅을 했었는데, 최근 들어 Ubuntu 설치해야 할 일이 많아지다 보니 매번 블로그 들락날락 거리는게 귀찮아서 이렇게 문서로 정리해봤습니다.초기 세팅에 필요한 사항들은 거의 다 기재가 되어 있을 것이라 생각됩니다만, 저의 상황에 적합하게 정리한 글이다보니 부족한 부분이 있다면 양해 부탁드립니다.1. 기본 설정처음 Ubuntu를 설치하면 기본 apt 저장소가 ‘kr.archive.ubuntu.com’으로 되어 있습니다. 하지만 꽤나 다운받는 속도가 느리기 때문에 먼저 저장소 위치를 ‘mirror.kakao.com’으로 변경한 뒤 작업을 시작하도록 합니다.sudo sed -i 's/kr.archive.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.listsudo sed -i 's/security.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.listsudo apt update &amp;&amp; sudo apt -y upgrade &amp;&amp; sudo apt -y autoremove2. 기본 패키지 설치sudo apt install -y build-essential net-tools pkg-config curl wget git cmake vim  build-essential 패키지는 C 및 C++로 작성된 소프트웨어를 컴파일할 수 있는 필수 도구들을 포함한 메타 패키지입니다.          e.g., gcc, g++, make, libc6-dev, dpkg-dev 등        net-tools는 네트워크 설정과 상태를 확인하는데 사용되는 레거시 도구들의 모음입니다.          e.g., ifconfig, netstat, route, arp, hostname 등        pkg-config는 컴파일 및 링크 단계에서 필요한 라이브러리의 경로와 컴파일 옵션을 쉽게 얻을 수 있도록 도와주는 도구입니다.  curl과 wget은 파일 다운로드를 위한 도구입니다.3. OpenSSH 설정  ssh를 통해 remote 접근이나 Xshell, MobaXterm과 같은 프로그램을 통한 접근을 가능케 하기 위해 OpenSSH를 설정합니다.sudo apt install openssh-serversudo systemctl status sshsudo systemctl enable ssh4. VirtualBox 네트워크 설정 + Samba 설정 (Optional)  이 부분은 Ubuntu를 VirtualBox 상에 설치한 분들에게만 해당됩니다.VirtualBox에서 작업을 할 경우 클립보드 설정이나 속도 등 여러가지 이슈로 인해 불편함이 많아, 보통은 Xshell이나 MobaXterm과 같은 SSH 클라이언트로 접근을 하게 됩니다.이 때 네트워크 설정과 Samba 설정, 이렇게 2가지가 필요합니다.먼저 네트워크 설정이 없이는 Host에서 VirtualBox Ubuntu로 ssh 연결을 수립할 수가 없습니다. 그리고 samba의 경우 설정을 하고 나면, VirtualBox Ubuntu 내의 파일들을 Windows에서 일반적인 드라이브 접근하는 방식과 동일하게 사용할 수 있습니다.아래 제가 작성한 다른 포스트를 읽고 순서대로 따라하시길 바랍니다.  VirtualBox 네트워크 설정          NAT 설정만 필요하신 분은 해당 포스트의 맨 마지막만 참고하시면 됩니다.        VirtualBox Samba 설정5. zsh + Oh-my-zsh 관련 설정5.1. zsh + Oh-my-zsh 설치# zsh 설치 후 shell을 zsh로 변경sudo apt install zshchsh -s $(which zsh)# Oh-my-zsh 설치sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"5.2. zsh plugin 설치  zsh-autosuggestions: 최근에 입력한 command history를 바탕으로 자동완성을 시켜주는 plugin입니다. 오른쪽 방향키를 통해서 autosuggestion을 완성할 수 있습니다.git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions  Syntax highlighting: 터미널에서 사용하는 명령어를 하이라이트 해주고, 사용 가능한 명령어의 경우 초록색으로, 사용 가능하지 않은 명령어의 경우 붉은색으로 표시해줍니다.git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting  Plugin 설치: ~/.zshrc 파일을 다음과 같이 수정합니다.          plugins 부분에 zsh-autosuggestions와 zsh-syntax-highlighting을 추가합니다.      현재 zsh-autosuggestions 플러그인에서 간간히 오류가 발생해서 이를 방지하기 위해 .zshrc 파일의 맨 밑에 unset ZSH_AUTOSUGGEST_USE_ASYNC를 추가합니다.      vi ~/.zshrc# ~/.zshrc...# 원래 plugins# plugins=(git)plugins=(git        zsh-autosuggestions        zsh-syntax-highlighting)...unset ZSH_AUTOSUGGEST_USE_ASYNC5.3. Meslo nerd font 설치Nerd Font란 개발자들이 사용하는 아이콘과 심볼을 포함한 폰트로, 개발 환경에서 필요한 다양한 아이콘이 포함된 폰트로 이해하면 됩니다. zsh 테마에서는 아이콘이 많이 쓰이기 때문에, 만약에 Nerd Font가 아닌 기본 폰트를 이용하신다면 이러한 아이콘들이 모두 깨져 보이게 됩니다.따라서 zsh 테마를 세팅하기로 마음먹었으면 필수 설치를 해야하고, Meslo Nerd Font는 좀 있다 설명할 powerlevel10k에서 권장하는 폰트라 이걸로 설치를 하겠습니다.  아래의 명령어를 입력해서 압축파일을 다운받고, 압축을 home directory의 Meslo 폴더에 해제합니다.wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.0/Meslo.zipunzip Meslo.zip -d ~/Meslo  .ttf 파일을 ~/.local/share/fonts로 옮기고, 폰트 캐시를 업데이트합니다.mv ~/Meslo/*.ttf ~/.local/share/fontsfc-cache -fv  터미널 세팅에 들어가서 폰트를 MesloLGS NF로 선택합니다.5.4. powerlevel10k 설치zsh 테마 세팅을 설치 마법사 형태로 할 수 있게끔 도와주는 오픈소스로, 이거 하나만 있으면 zsh 테마 세팅이 매우 쉬워집니다. 필수적이진 않지만 한 번 써보면 다시는 돌아갈 수 없음.  powerlevel10k를 다운받고 ~/.zshrc를 변경합니다.git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10kecho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &gt;&gt; ~/.zshrc  source ~/.zshrc를 치면 powerlevel10k가 실행됩니다.source ~/.zshrc아까 Meslo Nerd Font 설정이 되어 있다면 아이콘들이 깨짐 없이 잘 보일 것입니다. 다른 설정들은 모두 본인 취향에 맞게 설정하시면 되는데, Instant Prompt Mode의 경우 recommended option을 선택하시는 것을 권장드립니다.6. 한글 입력 설정한글 입력 및 한영키 할당 관련한 설정은 분량이 좀 길기도 하고, 이미 다른 분께서 잘 정리해 둔 포스트가 있어 링크로 대신합니다.  https://staraube.tistory.com/1057. OpenCV 설치 (Optional)  아래 명령어를 통해 필요한 패키지를 설치합니다.sudo apt updatesudo apt install libgtk2.0-dev libavcodec-dev libavformat-dev libswscale-devsudo apt install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-devsudo apt install v4l-utils libv4l-dev  Python과 C/C++용 OpenCV를 모두 설치합니다.sudo apt install python3-opencvsudo apt install libopencv-dev8. Version Manager 및 이를 통한 패키지 설치 (Optional)아래 제가 작성한 포스트 중 필요한 포스트를 읽고 순서대로 따라하시면 됩니다.  pyenv &amp; Python 설치  rvenv &amp; Ruby 설치  nvm &amp; Node 설치"
  }
  
]

